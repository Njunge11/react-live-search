{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar resources = {};\n\nvar search =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(query) {\n    var res, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log();\n            _context.next = 4;\n            return axios(query);\n\n          case 4:\n            res = _context.sent;\n            result = res.data.results;\n            console.log(result);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 9]]);\n  }));\n\n  return function search(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // const makeRequestCreator = () => {\n//   let cancel;\n//   return async query => {\n//     if (cancel) {\n//       // Cancel the previous request before making a new request\n//       cancel.cancel();\n//     }\n//     // Create a new CancelToken\n//     cancel = axios.CancelToken.source();\n//     try {\n//       if (resources[query]) {\n//         // Return result if it exists\n//         return resources[query];\n//       }\n//       const res = await axios(query, { cancelToken: cancel.token });\n//       const result = res.data.results;\n//       // Store response\n//       resources[query] = result;\n//       return result;\n//     } catch (error) {\n//       if (axios.isCancel(error)) {\n//         // Handle if request was cancelled\n//         console.log(\"Request canceled\", error.message);\n//       } else {\n//         // Handle usual errors\n//         console.log(\"Something went wrong: \", error.message);\n//       }\n//     }\n//   };\n// };\n// export const search = makeRequestCreator();\n\n\nexport default search;","map":{"version":3,"sources":["/home/njunge/Projects/front-end/react-live-search/src/utils.js"],"names":["axios","resources","search","query","console","log","res","result","data","results"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,SAAS,GAAG,EAAlB;;AAEA,IAAMC,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXC,YAAAA,OAAO,CAACC,GAAR;AAFW;AAAA,mBAGOL,KAAK,CAACG,KAAD,CAHZ;;AAAA;AAGLG,YAAAA,GAHK;AAILC,YAAAA,MAJK,GAIID,GAAG,CAACE,IAAJ,CAASC,OAJb;AAKXL,YAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AALW;AAAA;;AAAA;AAAA;AAAA;AAOXH,YAAAA,OAAO,CAACC,GAAR;;AAPW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANH,MAAM;AAAA;AAAA;AAAA,GAAZ,C,CAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,eAAeA,MAAf","sourcesContent":["import axios from \"axios\";\nconst resources = {};\n\nconst search = async query => {\n  try {\n    console.log();\n    const res = await axios(query);\n    const result = res.data.results;\n    console.log(result);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// const makeRequestCreator = () => {\n//   let cancel;\n\n//   return async query => {\n//     if (cancel) {\n//       // Cancel the previous request before making a new request\n//       cancel.cancel();\n//     }\n//     // Create a new CancelToken\n//     cancel = axios.CancelToken.source();\n//     try {\n//       if (resources[query]) {\n//         // Return result if it exists\n//         return resources[query];\n//       }\n//       const res = await axios(query, { cancelToken: cancel.token });\n\n//       const result = res.data.results;\n//       // Store response\n//       resources[query] = result;\n\n//       return result;\n//     } catch (error) {\n//       if (axios.isCancel(error)) {\n//         // Handle if request was cancelled\n//         console.log(\"Request canceled\", error.message);\n//       } else {\n//         // Handle usual errors\n//         console.log(\"Something went wrong: \", error.message);\n//       }\n//     }\n//   };\n// };\n\n// export const search = makeRequestCreator();\nexport default search;\n"]},"metadata":{},"sourceType":"module"}