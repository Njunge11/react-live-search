{"ast":null,"code":"import axios from \"axios\";\nconst resources = {};\n\nconst search = async () => {\n  try {\n    const res = await axios(query);\n    const result = res.data.results;\n    console.log(result);\n  } catch (error) {}\n}; // const makeRequestCreator = () => {\n//   let cancel;\n//   return async query => {\n//     if (cancel) {\n//       // Cancel the previous request before making a new request\n//       cancel.cancel();\n//     }\n//     // Create a new CancelToken\n//     cancel = axios.CancelToken.source();\n//     try {\n//       if (resources[query]) {\n//         // Return result if it exists\n//         return resources[query];\n//       }\n//       const res = await axios(query, { cancelToken: cancel.token });\n//       const result = res.data.results;\n//       // Store response\n//       resources[query] = result;\n//       return result;\n//     } catch (error) {\n//       if (axios.isCancel(error)) {\n//         // Handle if request was cancelled\n//         console.log(\"Request canceled\", error.message);\n//       } else {\n//         // Handle usual errors\n//         console.log(\"Something went wrong: \", error.message);\n//       }\n//     }\n//   };\n// };\n// export const search = makeRequestCreator();\n\n\nexport default search;","map":{"version":3,"sources":["/home/njunge/Projects/front-end/react-live-search/src/utils.js"],"names":["axios","resources","search","res","query","result","data","results","console","log","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,MAAMC,MAAM,GAAG,YAAY;AACzB,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,KAAD,CAAvB;AACA,UAAMC,MAAM,GAAGF,GAAG,CAACG,IAAJ,CAASC,OAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc,CAAE;AACnB,CAND,C,CAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,eAAeR,MAAf","sourcesContent":["import axios from \"axios\";\nconst resources = {};\n\nconst search = async () => {\n  try {\n    const res = await axios(query);\n    const result = res.data.results;\n    console.log(result);\n  } catch (error) {}\n};\n\n// const makeRequestCreator = () => {\n//   let cancel;\n\n//   return async query => {\n//     if (cancel) {\n//       // Cancel the previous request before making a new request\n//       cancel.cancel();\n//     }\n//     // Create a new CancelToken\n//     cancel = axios.CancelToken.source();\n//     try {\n//       if (resources[query]) {\n//         // Return result if it exists\n//         return resources[query];\n//       }\n//       const res = await axios(query, { cancelToken: cancel.token });\n\n//       const result = res.data.results;\n//       // Store response\n//       resources[query] = result;\n\n//       return result;\n//     } catch (error) {\n//       if (axios.isCancel(error)) {\n//         // Handle if request was cancelled\n//         console.log(\"Request canceled\", error.message);\n//       } else {\n//         // Handle usual errors\n//         console.log(\"Something went wrong: \", error.message);\n//       }\n//     }\n//   };\n// };\n\n// export const search = makeRequestCreator();\nexport default search;\n"]},"metadata":{},"sourceType":"module"}