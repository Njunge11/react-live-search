{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar resources = {};\n\nvar makeRequestCreator = function makeRequestCreator() {\n  var cancel;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(query) {\n        var res, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (cancel) {\n                  // Cancel the previous request before making a new request\n                  cancel.cancel();\n                } // Create a new CancelToken\n\n\n                cancel = axios.CancelToken.source();\n                _context.prev = 2;\n\n                if (!resources[query]) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", resources[query]);\n\n              case 5:\n                _context.next = 7;\n                return axios(query, {\n                  cancelToken: cancel.token\n                });\n\n              case 7:\n                res = _context.sent;\n                result = res.data.results; // Store response\n\n                resources[query] = result;\n                return _context.abrupt(\"return\", result);\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (axios.isCancel(_context.t0)) {\n                  // Handle if request was cancelled\n                  console.log(\"Request canceled\", _context.t0.message);\n                } else {\n                  // Handle usual errors\n                  console.log(\"Something went wrong: \", _context.t0.message);\n                }\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 13]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nexport var search = makeRequestCreator();","map":{"version":3,"sources":["/home/njunge/Projects/front-end/react-live-search/src/utils.js"],"names":["axios","resources","makeRequestCreator","cancel","query","CancelToken","source","cancelToken","token","res","result","data","results","isCancel","console","log","message","search"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,SAAS,GAAG,EAAlB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,MAAIC,MAAJ;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,oBAAID,MAAJ,EAAY;AACV;AACAA,kBAAAA,MAAM,CAACA,MAAP;AACD,iBAJI,CAKL;;;AACAA,gBAAAA,MAAM,GAAGH,KAAK,CAACK,WAAN,CAAkBC,MAAlB,EAAT;AANK;;AAAA,qBAQCL,SAAS,CAACG,KAAD,CARV;AAAA;AAAA;AAAA;;AAAA,iDAUMH,SAAS,CAACG,KAAD,CAVf;;AAAA;AAAA;AAAA,uBAYeJ,KAAK,CAACI,KAAD,EAAQ;AAAEG,kBAAAA,WAAW,EAAEJ,MAAM,CAACK;AAAtB,iBAAR,CAZpB;;AAAA;AAYGC,gBAAAA,GAZH;AAcGC,gBAAAA,MAdH,GAcYD,GAAG,CAACE,IAAJ,CAASC,OAdrB,EAeH;;AACAX,gBAAAA,SAAS,CAACG,KAAD,CAAT,GAAmBM,MAAnB;AAhBG,iDAkBIA,MAlBJ;;AAAA;AAAA;AAAA;;AAoBH,oBAAIV,KAAK,CAACa,QAAN,aAAJ,EAA2B;AACzB;AACAC,kBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,YAAMC,OAAtC;AACD,iBAHD,MAGO;AACL;AACAF,kBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,YAAMC,OAA5C;AACD;;AA1BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BD,CAhCD;;AAkCA,OAAO,IAAMC,MAAM,GAAGf,kBAAkB,EAAjC","sourcesContent":["import axios from \"axios\";\nconst resources = {};\n\nconst makeRequestCreator = () => {\n  let cancel;\n\n  return async query => {\n    if (cancel) {\n      // Cancel the previous request before making a new request\n      cancel.cancel();\n    }\n    // Create a new CancelToken\n    cancel = axios.CancelToken.source();\n    try {\n      if (resources[query]) {\n        // Return result if it exists\n        return resources[query];\n      }\n      const res = await axios(query, { cancelToken: cancel.token });\n\n      const result = res.data.results;\n      // Store response\n      resources[query] = result;\n\n      return result;\n    } catch (error) {\n      if (axios.isCancel(error)) {\n        // Handle if request was cancelled\n        console.log(\"Request canceled\", error.message);\n      } else {\n        // Handle usual errors\n        console.log(\"Something went wrong: \", error.message);\n      }\n    }\n  };\n};\n\nexport const search = makeRequestCreator();\n"]},"metadata":{},"sourceType":"module"}