{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar cancel;\n\nvar search =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(query) {\n    var res, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (cancel) {\n              cancel.cancel();\n            }\n\n            cancel = axios.CancelToken.source();\n            _context.prev = 2;\n            _context.next = 5;\n            return axios(query, {\n              cancelToken: cancel.token\n            });\n\n          case 5:\n            res = _context.sent;\n            result = res.data.results;\n            return _context.abrupt(\"return\", result);\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (axios.isCancel) {\n              console.log(\"Request cancelled \", _context.t0.message);\n            } else {\n              console.log(\"Something went wrong: \", _context.t0.message);\n            }\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 11]]);\n  }));\n\n  return function search(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // const makeRequestCreator = () => {\n//   let cancel;\n//   return async query => {\n//     if (cancel) {\n//       // Cancel the previous request before making a new request\n//       cancel.cancel();\n//     }\n//     // Create a new CancelToken\n//     cancel = axios.CancelToken.source();\n//     try {\n//       if (resources[query]) {\n//         // Return result if it exists\n//         return resources[query];\n//       }\n//       const res = await axios(query, { cancelToken: cancel.token });\n//       const result = res.data.results;\n//       // Store response\n//       resources[query] = result;\n//       return result;\n//     } catch (error) {\n//       if (axios.isCancel(error)) {\n//         // Handle if request was cancelled\n//         console.log(\"Request canceled\", error.message);\n//       } else {\n//         // Handle usual errors\n//         console.log(\"Something went wrong: \", error.message);\n//       }\n//     }\n//   };\n// };\n// export const search = makeRequestCreator();\n\n\nexport default search;","map":{"version":3,"sources":["/home/njunge/Projects/front-end/react-live-search/src/utils.js"],"names":["axios","cancel","search","query","CancelToken","source","cancelToken","token","res","result","data","results","isCancel","console","log","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAIC,MAAJ;;AACA,IAAMC,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,gBAAIF,MAAJ,EAAY;AACVA,cAAAA,MAAM,CAACA,MAAP;AACD;;AACDA,YAAAA,MAAM,GAAGD,KAAK,CAACI,WAAN,CAAkBC,MAAlB,EAAT;AAJa;AAAA;AAAA,mBAMOL,KAAK,CAACG,KAAD,EAAQ;AAAEG,cAAAA,WAAW,EAAEL,MAAM,CAACM;AAAtB,aAAR,CANZ;;AAAA;AAMLC,YAAAA,GANK;AAOLC,YAAAA,MAPK,GAOID,GAAG,CAACE,IAAJ,CAASC,OAPb;AAAA,6CAQJF,MARI;;AAAA;AAAA;AAAA;;AAWX,gBAAIT,KAAK,CAACY,QAAV,EAAoB;AAClBC,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,YAAMC,OAAxC;AACD,aAFD,MAEO;AACLF,cAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,YAAMC,OAA5C;AACD;;AAfU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANb,MAAM;AAAA;AAAA;AAAA,GAAZ,C,CAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,eAAeA,MAAf","sourcesContent":["import axios from \"axios\";\nlet cancel;\nconst search = async query => {\n  if (cancel) {\n    cancel.cancel();\n  }\n  cancel = axios.CancelToken.source();\n  try {\n    const res = await axios(query, { cancelToken: cancel.token });\n    const result = res.data.results;\n    return result;\n    console.log(result);\n  } catch (error) {\n    if (axios.isCancel) {\n      console.log(\"Request cancelled \", error.message);\n    } else {\n      console.log(\"Something went wrong: \", error.message);\n    }\n  }\n};\n\n// const makeRequestCreator = () => {\n//   let cancel;\n\n//   return async query => {\n//     if (cancel) {\n//       // Cancel the previous request before making a new request\n//       cancel.cancel();\n//     }\n//     // Create a new CancelToken\n//     cancel = axios.CancelToken.source();\n//     try {\n//       if (resources[query]) {\n//         // Return result if it exists\n//         return resources[query];\n//       }\n//       const res = await axios(query, { cancelToken: cancel.token });\n\n//       const result = res.data.results;\n//       // Store response\n//       resources[query] = result;\n\n//       return result;\n//     } catch (error) {\n//       if (axios.isCancel(error)) {\n//         // Handle if request was cancelled\n//         console.log(\"Request canceled\", error.message);\n//       } else {\n//         // Handle usual errors\n//         console.log(\"Something went wrong: \", error.message);\n//       }\n//     }\n//   };\n// };\n\n// export const search = makeRequestCreator();\nexport default search;\n"]},"metadata":{},"sourceType":"module"}